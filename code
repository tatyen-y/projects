import pandas as pd
from sklearn.impute import KNNImputer
from sklearn.metrics import accuracy_score
import numpy as np
from sklearn.model_selection import train_test_split

# Пример DataFrame с данными
data = {
    'feature1': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
    'feature2': [5, 15, 25, 35, 45, 55, 65, 75, 85, 95],
    'feature3': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],
    'parking': ['подземная', 'наземная', 'подземная', 'многоуровневая наземная', 'наземная', 'подземная', 'многоуровневая наземная', 'наземная', 'подземная', 'многоуровневая наземная']
}

df = pd.DataFrame(data)

# Преобразуем категориальные значения парковки в числовые
parking_mapping = {'наземная': 0, 'многоуровневая наземная': 1, 'подземная': 2}
df['parking'] = df['parking'].map(parking_mapping)

# Разделяем данные на обучающую и тестовую выборки
train_df, test_df = train_test_split(df, test_size=0.3, random_state=42)

# Сохраняем истинные значения для тестовой выборки
true_values = test_df['parking'].copy()

# Искусственно создаем пропуски в столбце 'parking' в тестовой выборке
test_df['parking'] = np.nan

# Объединяем обучающую и тестовую выборки для заполнения пропусков
combined_df = pd.concat([train_df, test_df], ignore_index=True)

# Инициализируем KNNImputer и заполняем пропуски
imputer = KNNImputer(n_neighbors=3)
imputed_data = imputer.fit_transform(combined_df)

# Преобразуем обратно в DataFrame и добавляем имена колонок
imputed_df = pd.DataFrame(imputed_data, columns=combined_df.columns)

# Преобразуем значения в столбце 'parking' обратно в дискретные
imputed_df['parking'] = np.round(imputed_df['parking']).astype(int)

# Извлекаем заполненные значения для тестовой выборки
filled_values = imputed_df.loc[test_df.index, 'parking']

# Оцениваем точность заполнения пропусков
accuracy = accuracy_score(true_values, filled_values)

print(f"Точность заполнения пропусков: {accuracy:.2f}")

